#!/bin/bash

source orkhideya
ork_include if
ork_include qemu
ork_include mac

if [ -z "$ORK_QEMU_MAC_ADDR" ]; then
   export ORK_QEMU_MAC_ADDR="$(mac_random)"
fi 

export ORK_QEMU_ARGS=""$ORK_QEMU_ARGS" "$(qemu_arg_default "$ORK_QEMU_ARGS" "net nic" ",model=e1000,name=eth0,macaddr=$ORK_QEMU_MAC_ADDR")""

if ! qemu_arg_exists "$ORK_QEMU_ARGS" "net tap"; then
   if [ -z "$(if_interface_list | grep ^rqmu[[:digit:]+])" ]; then
      _router_interface="$(if_class_create router "$(if_gateway_interface)" rqmu)"

      function router_cleanup
      {
         if_class_destroy router "$_router_interface"
      }

      stdlib_trap_cleanup_push router_cleanup
   else
      _router_interface="$(if_interface_list | grep ^rqmu[[:digit:]+] | sort | head -n1)"
   fi

   if [ -z "$_router_interface" ]; then
      stdout_error "No router interface to connect to."
      exit 1
   fi

   export ORK_QEMU_ROUTER="$_router_interface"

   _tunnel_interface="$(if_class_create tunnel $_router_interface tqmu)"

   if [ -z "$_tunnel_interface" ]; then
      stdout_error "Failed to create tunnel."
      stdlib_trap [ "0" == "1" ]
   fi

   function tunnel_cleanup
   {
      if_class_destroy tunnel "$_tunnel_interface"
   }

   stdlib_trap if_interface_up "$_tunnel_interface"
   stdlib_trap_cleanup_push tunnel_cleanup

   export ORK_QEMU_ARGS=""$ORK_QEMU_ARGS" -net tap,ifname="$_tunnel_interface",script=no"
fi
